name: Python Application Test

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller flake8

    - name: Get list of changed files
      id: files
      uses: actions/github-script@v3
      with:
        script: |
          const payload = context.payload;
          const pullRequest = payload.pull_request;
          const listFilesOptions = github.pulls.listFiles.endpoint.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pullRequest.number
          });
          const files = await github.paginate(listFilesOptions, (response) => {
            return response.data.map(file => file.filename);
          });
          const pythonFiles = files.filter(file => file.endsWith('.py'));
          if (pythonFiles.length > 0) {
            core.setOutput('files', pythonFiles.join('\n'));
          } else {
            core.setFailed('No Python files changed.');
          }

    - name: Run Flake8 for syntax errors
      if: steps.files.outputs.files
      run: |
        echo "Changed Python Files:"
        echo "${{ steps.files.outputs.files }}"
        IFS=$'\n' read -d '' -r -a files_array <<< "${{ steps.files.outputs.files }}"
        for file in "${files_array[@]}"
        do
          echo "Processing $file"
          # Check only for critical syntax errors: E9, F63, F7, F82
          flake8 $file --select=E9,F63,F7,F82
        done

    - name: Build executables with PyInstaller
      if: steps.files.outputs.files
      run: |
        for file in "${files_array[@]}"
        do
          echo "Building executable for $file"
          pyinstaller --onefile $file
        done

    - name: Upload executables as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: executables
        path: dist/

    - name: List output
      run: ls -l dist/
